import { Request, Response, Router } from "express";
import sequelize, { oaDB } from "../db/dbConnect";
import { QueryTypes } from "sequelize";
const router = Router();

router.get('/', async (req, res) => {
    const links = await oaDB.query(`
SELECT * 
FROM link_mark`, {
        type: QueryTypes.SELECT,
      });
 
      
      res.status(200).json(
        {
            data: links
        }
      )

})

router.post('/test', async (req: Request, res: Response) => {


    const {shop, conversion_rate_l, conversion_rate_h, sales_numbers, linkids, begin_date, end_date, 
        promote_level, sales_volume, profit_rate_l, profit_rate_h, p_r_l, p_r_h } = req.body;

    let sqlWhereOne = 'WHERE '

    if (shop) {
        sqlWhereOne += `[店铺]=${shop} `
    }

    if (begin_date) {
        sqlWhereOne += sqlWhereOne.length > 6 ? ' and ' : ''
        sqlWhereOne += `[业务日期]>=${begin_date} `
    }
    if (end_date) {
        sqlWhereOne += sqlWhereOne.length > 6 ? ' and ' : ''
        sqlWhereOne += `[业务日期]<=${end_date} `
    }

    if (linkids) {
        sqlWhereOne += sqlWhereOne.length > 6 ? ' and ' : ''
        sqlWhereOne += `[链接ID] IN (\'${(linkids as string[]).join('\',\'')}\')`
    }

    let sqlWhereTwo = 'HAVING '
    let sqlWhereTwoInitLen = sqlWhereTwo.length;

    // 销售额
    if (sales_volume) {
        sqlWhereTwo += sqlWhereOne.length > sqlWhereTwoInitLen ? ' and ' : ''
        sqlWhereTwo += `SUM([销售额]) >= ${sales_volume} `
    }

    // 销售件数
    if (sales_numbers) {
        sqlWhereTwo += sqlWhereOne.length > sqlWhereTwoInitLen ? ' and ' : ''
        sqlWhereTwo += `SUM([销售件数]) >= ${sales_numbers} `
    }    
    let sqlWhereThree = 'WHERE '
    let sqlWhereThreeInitLen = sqlWhereThree.length;

    // 转化率
    if (conversion_rate_l) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[转化率] >= ${conversion_rate_l} `
    }
    if (conversion_rate_h) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[转化率] <= ${conversion_rate_h} `
    }
    // 利润率
    if (profit_rate_l) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[利润率] >= ${profit_rate_l} `
    }

    if (profit_rate_h) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[利润率] <= ${profit_rate_h} `
    }
    // 推广费占比

    if (p_r_l) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[推广费占比] >= ${p_r_l} `
    }
    if (p_r_h) {
        sqlWhereThree += sqlWhereThree.length > sqlWhereThreeInitLen ? ' and ' : ''
        sqlWhereThree += `a.[推广费占比] <= ${p_r_h} `
    }


    req.setTimeout(300 * 1000)
    const links1 = await sequelize.query(`
        SELECT * 
        FROM (
          SELECT
          SUM([销售件数]) AS 销售件数,
          [链接ID],
          SUM([销售额]) AS [销售额],
          SUM([访客数]) AS 访客数,
          SUM([买家数]) AS 买家数,
          SUM([平台广告费] + [刷单广告费] + [联盟广告费]) AS 推广费,
          SUM([销售利润]) AS 销售利润,
        CASE
            WHEN SUM([访客数]) = 0 THEN
            NULL ELSE SUM([买家数]) / SUM([访客数]) 
          END AS 转化率,
        CASE
            WHEN SUM([销售额]) = 0 THEN
            NULL ELSE SUM([平台广告费] + [刷单广告费] + [联盟广告费]) / SUM([销售额]) 
          END AS 推广费占比,
        CASE
            
            WHEN SUM([销售额]) = 0 THEN
            NULL ELSE SUM([销售利润]) / SUM([销售额]) 
          END AS 利润率 
        FROM
          [DW_Links].[链接日报] 
        WHERE
          [业务日期] >= '2024-11-17' 
          AND [业务日期] <= '2024-11-25' 
        GROUP BY [链接ID] 
        HAVING
          SUM([销售额]) > 100 
          AND SUM([销售件数]) > 20
        ) AS a
        WHERE a.[利润率] > 0.1 and a.[转化率] > 0 and a.[推广费占比] > 0
                `, {
                type: QueryTypes.SELECT,
    
            });
             
      if (links1.length) {
        const linkids = links1.map((l: any) => l['链接ID'])
        const links2 = await sequelize.query(`SELECT * FROM [DIM].[链接表] WHERE [链接ID] IN (\'${linkids.join('\',\'')}\')`, {
            type: QueryTypes.SELECT,
        });
        const links3 = await oaDB.query(`
            SELECT * 
            FROM link_mark`, {
                    type: QueryTypes.SELECT,
                  });
          const data = links1.map((l: any) => {
            const target1 = links2.find((k: any) => k['链接ID'] === l['链接ID'])
            const target2 = links3.find((k: any) => k['link_id'] === l['链接ID'])
            let link = {...l}
            if (target1) {
                link =  {...link, ...target1}
            }
            if (target2) {
                link =  {...link, ...target2}
            }
            return link
          })


         res.status(200).json(
          {
            data
          }
        )
      } else {
        res.status(200).json(
            {
                data: links1
            }
        )
    }
})
export default router;